/** @format */

// NOTE: To uglify, roadroll and pack everything run the ./build.sh script

module.exports = function (grunt) {
	const path = require("path");

	// Load Grunt tasks declared in the package.json file
	require("matchdep").filterDev("grunt-*").forEach(grunt.loadNpmTasks);

	// Project configuration.
	grunt.initConfig({
		watch: {
			scripts: {
				files: [
					"GruntFile.js",
					"src/js/**/*.js",
					"src/gfx/**/*",
					"src/levels/*",
					"dist/lib/*.js",
					"src/html/*",
					"!src/js/start_GEN.js",
				],
				tasks: ["build"],
				options: {
					interrupt: true,
					reload: true,
					//livereload: true,
				},
			},
			pages: {
				files: ["src/html/*.*"],
				tasks: ["concat:dev"],
				options: {
					//livereload: true,
				},
			},
		},

		"http-server": {
			dev: {
				root: "dist",
				port: 3216,
				runInBackground: true,
				cache: 0,
			},
		},

		image: {
			dev: {
				options: {
					optipng: true,
					pngquant: false,
					zopflipng: false,
				},
				files: {
					"dist/tiles.png": "src/gfx/tiles.png",
				},
			},
			prod: {
				options: {
					optipng: ["-o 7", "-zc 7"],
					//pngquant: ['-s1', '--quality=40-60'],
					pngquant: ["-s1"],
					zopflipng: ["-m"],
				},
				files: {
					"dist/tiles.png": "src/gfx/tiles.png",
				},
			},
		},

		closureCompiler: {
			options: {
				compilerFile: "node_modules/google-closure-compiler-java/compiler.jar",
				compilerOpts: {
					compilation_level: "ADVANCED",
					language_out: "ECMASCRIPT_2021",
					jscomp_off: "*",
					assume_function_wrapper: true,
				},
			},
			targetName: {
				src: "dist/js/index_prod.js",
				dest: "dist/i.js",
			},
		},

		clean: ["dist/*.html", "dist/*.zip", "dist/*.js", "dist/*.png", "dist/js/"],

		concat: {
			dev: {
				files: {
					"dist/index.html": ["src/html/index_dev.html"],
				},
			},
			shared: {
				files: {
					"dist/index.js": ["src/js/**/*.js"],
				},
			},
			prod: {
				files: {
					"dist/index.html": ["src/html/index_prod.html"],
					"dist/js/index_prod.js": ["dist/lib/littlejs.js", "dist/index.js"],
				},
			},
		},
		obfuscator: {
			options: {
				compact: true,
				controlFlowFlattening: false,
				deadCodeInjection: false,
				debugProtection: false,
				debugProtectionInterval: false,
				disableConsoleOutput: false,
				identifierNamesGenerator: "hexadecimal",
				log: false,
				renameGlobals: false,
				rotateStringArray: true,
				selfDefending: true,
				stringArray: false, // changed from high performace settings
				stringArrayEncoding: ["none"],
				stringArrayThreshold: 0.75,
				unicodeEscapeSequence: false,
			},
			task1: {
				files: {
					"dist/index.js": ["dist/js/index_closure.js"],
				},
			},
		},
	});

	// These plugins provide necessary tasks.
	grunt.loadNpmTasks("grunt-contrib-watch");

	/*grunt.registerTask("rollup", "combine html and js", function () {
		let src = grunt.file.read("dist/js/index_prod.js");

		grunt.file.write("dist/index.html", "<script>" + src + "</script>");
	});*/

	grunt.registerTask("processMap", "get map data from Tiled", function () {
		let str = "// THIS FILE IS GENERATED BY THE GRUNT BUILD SCRIPT\n";
		str += "let levelData = [\n";

		let levels = grunt.file.expand("src/levels/level*.tmj");

		console.log("levels ", levels);

		for (const level of levels) {
			console.log("level:", level);

			//str += 'mapData["' + worldName + '"] = [\n'; //}; \n';
			let mapJson = grunt.file.readJSON(level);

			// A level
			str +=
				"{ w: " +
				mapJson.width +
				", h: " +
				mapJson.height +
				", d: [" +
				//mapJson.layers[0].data.toString().replaceAll(",0,", ",,").replaceAll(",0,", ",,") +
				mapJson.layers[0].data.toString() +
				"]";
			str += "}, \n";
		}
		str += "]; \n";

		// str += "const IS_RELEASE = false;\n";

		grunt.file.write("src/js/start_GEN.js", str);
	});

	grunt.registerTask("setIsRelease", "", function () {
		let str = grunt.file.read("src/js/start_GEN.js");
		str += "\nconst IS_RELEASE = true;\n";
		grunt.file.write("src/js/start_GEN.js", str);
	});

	grunt.registerTask("setIsNotRelease", "", function () {
		let str = grunt.file.read("src/js/start_GEN.js");
		str += "\nconst IS_RELEASE = false;\n";
		grunt.file.write("src/js/start_GEN.js", str);
	});

	grunt.registerTask("dev", ["watch"]);

	grunt.registerTask("build", ["clean", "processMap", "setIsNotRelease", "concat:dev", "concat:shared", "image:dev"]);

	grunt.registerTask("default", ["build", "http-server", "dev"]);

	grunt.registerTask("prod", ["clean", "processMap", "setIsRelease", "image:prod", "concat:shared", "concat:prod"]);

	grunt.registerTask("web", ["http-server", "dev"]);
};
